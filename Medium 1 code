#include <stdio.h>
#include <stdlib.h>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {
    while (root) {
        // If both nodes are smaller, LCA must be in the left subtree
        if (root->val > p->val && root->val > q->val) {
            root = root->left;
        }
        // If both nodes are larger, LCA must be in the right subtree
        else if (root->val < p->val && root->val < q->val) {
            root = root->right;
        }
        // If one node is smaller and the other is larger, root is the LCA
        else {
            return root;
        }
    }
    
    return NULL; // To handle the case where root is NULL
}

// Function to create a new tree node
struct TreeNode* createNode(int val) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->val = val;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

int main() {
    // Constructing the tree from the given input
    struct TreeNode* root = createNode(6);
    root->left = createNode(2);
    root->right = createNode(8);
    root->left->left = createNode(0);
    root->left->right = createNode(4);
    root->right->left = createNode(7);
    root->right->right = createNode(9);
    root->left->right->left = createNode(3);
    root->left->right->right = createNode(5);

    // Example 1:
    struct TreeNode* p1 = createNode(2);
    struct TreeNode* q1 = createNode(8);
    struct TreeNode* result1 = lowestCommonAncestor(root, p1, q1);
    printf("%d\n", result1->val);  // Output: 6

    // Example 2:
    struct TreeNode* p2 = createNode(2);
    struct TreeNode* q2 = createNode(4);
    struct TreeNode* result2 = lowestCommonAncestor(root, p2, q2);
    printf("%d\n", result2->val);  // Output: 2

    // Example 3:
    struct TreeNode* root2 = createNode(2);
    root2->left = createNode(1);
    struct TreeNode* p3 = createNode(2);
    struct TreeNode* q3 = createNode(1);
    struct TreeNode* result3 = lowestCommonAncestor(root2, p3, q3);
    printf("%d\n", result3->val);  // Output: 2

    return 0;
}
