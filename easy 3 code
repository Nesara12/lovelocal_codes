#include <stdio.h>
#include <stdlib.h>

int** generate(int numRows, int* returnSize, int** returnColumnSizes) {
    if (numRows == 0) {
        *returnSize = 0;
        return NULL;
    }

    int** triangle = (int**)malloc(numRows * sizeof(int*));
    *returnColumnSizes = (int*)malloc(numRows * sizeof(int));

    for (int i = 0; i < numRows; i++) {
        // Allocate memory for each row
        triangle[i] = (int*)malloc((i + 1) * sizeof(int));
        (*returnColumnSizes)[i] = i + 1;

        // Fill the row with values
        triangle[i][0] = 1;
        triangle[i][i] = 1;

        for (int j = 1; j < i; j++) {
            triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];
        }
    }

    *returnSize = numRows;
    return triangle;
}

// Function to free the memory allocated for Pascal's triangle
void freeTriangle(int** triangle, int numRows, int* returnColumnSizes) {
    for (int i = 0; i < numRows; i++) {
        free(triangle[i]);
    }
    free(triangle);
    free(returnColumnSizes);
}

// Function to print Pascal's triangle (for verification)
void printTriangle(int** triangle, int numRows, int* returnColumnSizes) {
    for (int i = 0; i < numRows; i++) {
        for (int j = 0; j < returnColumnSizes[i]; j++) {
            printf("%d ", triangle[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int numRows1 = 5;
    int returnSize1;
    int* returnColumnSizes1;
    int** result1 = generate(numRows1, &returnSize1, &returnColumnSizes1);
    printTriangle(result1, returnSize1, returnColumnSizes1);
    // Output:
    // 1
    // 1 1
    // 1 2 1
    // 1 3 3 1
    // 1 4 6 4 1

    printf("\n");

    int numRows2 = 1;
    int returnSize2;
    int* returnColumnSizes2;
    int** result2 = generate(numRows2, &returnSize2, &returnColumnSizes2);
    printTriangle(result2, returnSize2, returnColumnSizes2);
    // Output:
    // 1

    // Free the allocated memory
    freeTriangle(result1, numRows1, returnColumnSizes1);
    freeTriangle(result2, numRows2, returnColumnSizes2);

    return 0;
}
